// <copyright file="UniformIntSampler.cs" company="QuantifEye">
// Copyright (c) QuantifEye. All rights reserved.
// Licensed under the Apache 2.0 license.
// See LICENSE.txt file in the project root for full license information.
// </copyright>

namespace Qtfy.Net.Numerics.Random.Samplers
{
    using System;

    /// <summary>
    /// A base class for uniform discrete distributions.
    /// </summary>
    public sealed class UniformIntSampler : ISampler<int>
    {
        /// <summary>
        /// The random number engine used internally.
        /// </summary>
        private readonly IRandomNumberEngine engine;

        /// <summary>
        /// The unsigned value of the smallest number to be generated.
        /// </summary>
        private readonly uint unsignedMin;

        /// <summary>
        /// The range of random numbers to be generated.
        /// </summary>
        private readonly uint range;

        /// <summary>
        /// Initializes a new instance of the <see cref="UniformIntSampler"/> class.
        /// </summary>
        /// <param name="engine">
        ///     The random number engine to use as a source of entropy.
        /// </param>
        /// <param name="min">
        ///     The smallest number that will be generated.
        /// </param>
        /// <param name="max">
        ///     The greatest number that will be generated.
        /// </param>
        /// <exception cref="ArgumentException">
        /// If <paramref name="min"/> is greater than <paramref name="max"/>.
        /// </exception>
        public UniformIntSampler(IRandomNumberEngine engine, int min, int max)
        {
            unchecked
            {
                if (min > max)
                {
                    throw new ArgumentException(null, nameof(min));
                }

                this.engine = engine ?? throw new ArgumentNullException(nameof(engine));
                this.Min = min;
                this.Max = max;
                this.unsignedMin = (uint)min;
                this.range = (uint)max - (uint)min;
            }
        }

        /// <summary>
        /// Gets the smallest number that will be generated by this generator.
        /// </summary>
        public int Min { get; }

        /// <summary>
        /// Gets the greatest number that will be generated by this generator.
        /// </summary>
        public int Max { get; }

        /// <inheritdoc/>
        public int GetNext()
        {
            unchecked
            {
                return (int)(this.unsignedMin + this.engine.NextUInt(this.range));
            }
        }
    }
}
