// <copyright file="UniformDiscreteSampler.cs" company="QuantifEye">
// Copyright (c) QuantifEye. All rights reserved.
// Licensed under the Apache 2.0 license.
// See LICENSE.txt file in the project root for full license information.
// </copyright>

namespace Qtfy.Net.Numerics.Random.Samplers
{
    using System;

    /// <summary>
    /// A base class for uniform discrete distributions.
    /// </summary>
    /// <typeparam name="T">
    /// The type of the value that will be generated by this distribution.
    /// </typeparam>
    public abstract class UniformDiscreteSampler<T> : ISampler<T>
        where T : IComparable<T>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UniformDiscreteSampler{T}"/> class.
        /// </summary>
        /// <param name="min">
        /// The smallest number that will be generated.
        /// </param>
        /// <param name="max">
        /// The greatest number that will be generated.
        /// </param>
        /// <exception cref="ArgumentException">
        /// If <paramref name="min"/> is greater than <paramref name="max"/>.
        /// </exception>
        protected UniformDiscreteSampler(T min, T max)
        {
            if (min.CompareTo(max) == 1)
            {
                throw new ArgumentException(null, nameof(min));
            }

            this.Min = min;
            this.Max = max;
        }

        /// <summary>
        /// Gets the smallest number that will be generated by this generator.
        /// </summary>
        public T Min { get; }

        /// <summary>
        /// Gets the greatest number that will be generated by this generator.
        /// </summary>
        public T Max { get; }

        /// <inheritdoc/>
        public abstract T GetNext();
    }
}
