// <copyright file="UniformUIntGenerator.cs" company="QuantifEye">
// Copyright (c) QuantifEye. All rights reserved.
// Licensed under the Apache 2.0 license.
// See LICENSE.txt file in the project root for full license information.
// </copyright>

namespace Qtfy.Net.Numerics.Random.DistributionGenerators
{
    using System;
    using Qtfy.Net.Numerics.Distributions;
    using Qtfy.Net.Numerics.Random.BitGenerators;

    /// <summary>
    /// A distribution generator that is able to generate bounded uniformly distributed random variables.
    /// </summary>
    [CLSCompliant(false)]
    public class UniformUIntGenerator : IDistributionGenerator<uint>
    {
        private readonly UniformUIntBitGenerator generator;

        /// <summary>
        /// Initializes a new instance of the <see cref="UniformUIntGenerator"/> class.
        /// The generator produces numbers in the interval [min, max].
        /// </summary>
        /// <param name="generator">
        /// The souce generator to use as a random source.
        /// </param>
        /// <param name="min">
        /// The smallest number that will be generated by this generator.
        /// </param>
        /// <param name="max">
        /// The greatest number that will be generated by this generator.
        /// </param>
        public UniformUIntGenerator(UniformUIntBitGenerator generator, uint min, uint max)
        {
            if (min > max)
            {
                throw new ArgumentException(null, nameof(min));
            }

            this.Min = min;
            this.Max = max;
            this.generator = generator;
            this.Distribution = new UniformUIntDistribution(min, max);
        }

        /// <summary>
        /// Gets the smallest number that will be generated by this generator.
        /// </summary>
        private uint Min { get; }

        /// <summary>
        /// Gets the greatest number that will be generated by this generator.
        /// </summary>
        private uint Max { get; }

        /// <inheritdoc />
        public IDistribution<uint> Distribution { get; }

        /// <inheritdoc/>
        public uint GetNext()
        {
            return this.generator.NextUInt(this.Min, this.Max);
        }
    }
}
